(* Data structure like a list, but we can
 * add at both ends and eventually convert
 * to a list.  This uses channel-passing programming
 * techniques *)

(* This does not implement queues, since we cannot
 * dequeue an element and keep the data structure
 * intact *)

ltype List = +{nil: 1; cons: Int /\ List};;

ltype Seg = List -o List;;

ltype Queue =  &{enq: Int => Queue;
                 deq: +{none: 1; some: Int /\ Queue}};;

ltype DEList =  &{prepend: Int => DEList;
                  append: Int => DEList;
                  toList: List * 1};;

nil : {List};;
'l <- nil =
'l.nil ;
close 'l
;;

cons : Int -> {List <- List};;
'l <- cons n -< 'tail =
'l.cons ;
send 'l n ;
'l <- 'tail
;;

empty : {Seg};;
's <- empty =
'back <- recv 's ;
's <- 'back
;;

concat : {Seg <- Seg ; Seg};;
's <- concat -< 's1 's2 =
'back <- recv 's ;
send 's2 'back ;
send 's1 's2 ; 
's <- 's1
;;

prepend : Int -> {Seg <- Seg};;
's <- prepend n -< 's1 =
'back <- recv 's ;
send 's1 'back ;
's <- cons n -< 's1
;;

append : Int -> {Seg <- Seg};;
's <- append n -< 's1 =
'back <- recv 's ;
'back1 <- cons n -< 'back ;
send 's1 'back1 ;
's <- 's1
;;

drop : {Seg <- Seg};;
's <- drop -< 's1 =
'back <- recv 's ;
send 's1 'back ;
(* 's : List <- 's1 : List *)
case 's1 of
| nil -> abort (* or could stay as nil *)
| cons -> n <- recv 's1 ;
          's <- 's1
;;

(* dropb won't work, since the tail segment
 * is eventually nil *)
(*
dropb : {Seg <- Seg};;
'r <- dropb -< 's =
'back <- recv 'r ;
case 'back of
| nil -> wait 'back ; (* or abort here? *)
         'nl <- nil ;
         send 's 'nl ;
         'r <- 's
| cons -> n <- recv 'back ;
          send 's 'back ;
          'r <- 's
;;
*)

(* this queue implementation does not work
 * on deqeue, we cannot produce the element *)
queue : {Queue <- Seg};;
'q <- queue -< 's =
case 'q of
| enq -> n <- recv 'q ;
         's1 <- append n -< 's ;
         'q <- queue -< 's1
| deq -> 's1 <- drop -< 's ;
         'q.some ; send 'q 0 ; (* bug here! *)
         'q <- queue -< 's1
;;

queue_new : {Queue};;
'q <- queue_new =
's <- empty ;
'q <- queue -< 's
;;

print_queue : Int -> {1 <- Queue};;
'u <- print_queue i -< 'q =
if i > 0
then
'q.deq ;
case 'q of
| none -> wait 'q ;
          print_str "\n" ;
          close 'u
| some -> n <- recv 'q;
          print n; print_str " ";
          'u <- print_queue (i-1) -< 'q
else
print_str ".\n" ;
abort
;;

delist : {DEList <- Seg};;
'd <- delist -< 's =
case 'd of
| prepend -> n <- recv 'd ;
             's1 <- prepend n -< 's ;
             'd <- delist -< 's1
| append -> n <- recv 'd ;
            's1 <- append n -< 's ;
            'd <- delist -< 's1
| toList -> 'nl <- nil ;
            send 's 'nl ;
            send 'd 's ;
            close 'd
;;

delist_new : {DEList};;
'd <- delist_new =
's <- empty ;
'd <- delist -< 's
;;

print_list : {1 <- List};;
'u <- print_list -< 'l =
case 'l of
| nil -> wait 'l ;
         print_str "\n" ;
         close 'u
| cons -> x <- recv 'l ;
          print x; print_str " ";
          'u <- print_list -< 'l
;;



'top <-
'q0 <- empty ;
'q1 <- append 3 -< 'q0 ;
'q2 <- append 4 -< 'q1 ;
'q3 <- append 5 -< 'q2 ;
'nil <- nil ;
send 'q3 'nil ;
'u <- print_list -< 'q3 ;
wait 'u ;

's0 <- empty ;
's1 <- prepend 3 -< 's0 ;
's2 <- prepend 4 -< 's1 ;
's3 <- prepend 5 -< 's2 ;
'nil <- nil ;
send 's3 'nil ;
'u <- print_list -< 's3 ;
wait 'u ;

's0 <- empty ;
's1 <- prepend 3 -< 's0 ;
's2 <- append 4 -< 's1 ;
's3 <- append 5 -< 's2 ;
's4 <- prepend 2 -< 's3 ;
's5 <- prepend 1 -< 's4 ;
's6 <- drop -< 's5 ;
'nil <- nil ;
send 's6 'nil ;
'u <- print_list -< 's6 ;
wait 'u ;

(*
'q0 <- queue_new ;
send 'q0 `Enq ;
send 'q0 1 ;
send 'q0 `Enq ;
send 'q0 2 ;
send 'q0 `Enq ;
send 'q0 3 ;
'u <- print_queue 10 -< 'q0 ;
wait 'u ;
*)

'd0 <- delist_new ;
'd0.prepend ; send 'd0 3 ;
'd0.append ; send 'd0 4 ;
'd0.prepend ; send 'd0 2 ;
'd0.append ; send 'd0 5 ;
'd0.prepend ; send 'd0 1 ;
'd0.toList ;
'l <- recv 'd0 ; wait 'd0 ;
'u <- print_list -< 'l ;
wait 'u ;

close 'top
;;
