stype Stream a = &{`Stop: 1; `Next: a /\ Stream};;

countFrom : Int -> {Stream Int};;
'c <- countFrom n =
  case 'c of
  | `Stop -> close 'c
  | `Next -> send 'c n;
             'c <- countFrom (n+1);;

nats : {Stream Int};;
nats = countFrom 0;;

filter: (a -> Bool) -> {Stream a <- Stream a};;
'c <- filter q -< 'd = 
 case 'c of
 | `Stop -> send 'd `Stop;
            wait 'd;
            close 'c
 | `Next -> send 'd `Next;
            x <- recv 'd;
            case q x of
            | True -> send 'c x;
                     'c <- filter q -< 'd
           | False -> 'e <- filter q -< 'd;
                       send 'e `Next;
                      'c <- 'e;;

drop: Int -> {Stream a <- Stream a};;
'c <- drop n -< 'd =
 case n = 0 of
 | True -> 'c <- 'd
 | False -> send 'd `Next;
            _ <- recv 'd;
            'c <- drop (n-1) -< 'd;;

not : Bool -> Bool;;
not b = if b then False else True;;

divides : Int -> Int -> Bool;;
divides d n = if d > n
              then False
              else if d = n
                   then True
                   else divides d (n-d);;

sieve : {Stream Int <- Stream Int};;
'c <- sieve -< 'd = 
 case 'c of
 | `Stop -> send 'd `Stop;
           wait 'd;
           close 'c
 | `Next -> send 'd `Next;
           p <- recv 'd;
           send 'c p;
          'e <- filter (fun n -> not (divides p n)) -< 'd;
          'c <- sieve -< 'e;;

 primes : {Stream Int};;
'c <- primes =
'd <- nats;
'e <- drop 2 -< 'd;
'c <- sieve -< 'e;;

'c <- 'd <- primes; 
       send 'd `Next; x <- recv 'd; print x; print_str " ";
       send 'd `Next; x <- recv 'd; print x; print_str " ";
       send 'd `Next; x <- recv 'd; print x; print_str " ";
       send 'd `Next; x <- recv 'd; print x; print_str " ";
       send 'd `Next; x <- recv 'd; print x; print_str " ";
       send 'd `Next; x <- recv 'd; print x; print_str "\n";
       send 'd `Stop; wait 'd; close 'c;;
