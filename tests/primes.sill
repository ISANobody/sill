ltype Stream a = &{stop: 1; next: a /\ Stream a};;

countFrom : Int -> {Stream Int};;
'c <- countFrom n =
  case 'c of
  | stop -> close 'c
  | next -> send 'c n;
            'c <- countFrom (n+1);;

nats : {Stream Int};;
nats = countFrom 0;;

filter: (a -> Bool) -> {Stream a <- Stream a};;
'c <- filter q -< 'd = 
 case 'c of
 | stop -> 'd.stop;
           wait 'd;
           close 'c
 | next -> 'd.next;
           x <- recv 'd;
           case q x of
           | True -> send 'c x;
                    'c <- filter q -< 'd
          | False -> 'e <- filter q -< 'd;
                      'e.next;
                     'c <- 'e;;

drop: Int -> {Stream a <- Stream a};;
'c <- drop n -< 'd =
 case n = 0 of
 | True -> 'c <- 'd
 | False -> 'd.next;
            _ <- recv 'd;
            'c <- drop (n-1) -< 'd;;

not : Bool -> Bool;;
not b = if b then False else True;;

divides : Int -> Int -> Bool;;
divides d n = if d > n
              then False
              else if d = n
                   then True
                   else divides d (n-d);;

sieve : {Stream Int <- Stream Int};;
'c <- sieve -< 'd = 
 case 'c of
 | stop -> 'd.stop;
          wait 'd;
          close 'c
 | next -> 'd.next;
          p <- recv 'd;
          send 'c p;
         'e <- filter (fun n -> not (divides p n)) -< 'd;
         'c <- sieve -< 'e;;

primes : {Stream Int};;
'c <- primes =
'd <- nats;
'e <- drop 2 -< 'd;
'c <- sieve -< 'e;;

print_stream : Int -> {1 <- Stream Int};;
'c <- print_stream n -< 'd =
if n > 0
then 'd.next;
     x <- recv 'd;
     print x; print_str " ";
     'c <- print_stream (n-1) -< 'd
else 'd.stop;
     wait 'd;
     print_str "\n";
     close 'c
;;

'c <- 'd <- primes; 
      'u <- print_stream 25 -< 'd;
      wait 'u;
close 'c;;
