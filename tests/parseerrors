&&;;
%%%%
Error in line 1, column 1:
&&;;
^
Expecting data-level type declaration, end of input, session type declaration, top level definition or top level process
%%%%

t:&&;;
t = ();;
%%%%
Error in line 2, column 3:
t:&&;;
  ^
Expecting "forall" or data-level type
%%%%

t:forall && ;;
%%%%
Error in line 2, column 10:
t:forall && ;;
         ^
Expecting quantifier list (e.g., <a,'b,@c>)
%%%%

t:forall <&&> ;;
%%%%
Error in line 2, column 11:
t:forall <&&> ;;
          ^
Expecting ">" or quantifier
%%%%

t:forall <>. &&;;
%%%%
Error in line 2, column 14:
t:forall <>. &&;;
             ^
Expecting data-level type
%%%%

t:forall <'a>. &&;;
%%%%
Error in line 2, column 16:
t:forall <'a>. &&;;
               ^
Expecting data-level type
%%%%

t:{&&};;
%%%%
Error in line 2, column 4:
t:{&&};;
   ^
Expecting "}" or session type
%%%%

t:{(&&)};;
%%%%
Error in line 2, column 5:
t:{(&&)};;
    ^
Expecting session type
%%%%

t:{+{&&}};;
%%%%
Error in line 2, column 6:
t:{+{&&}};;
     ^
Expecting "}" or mapping from label to session type (e.g., foo:1)
%%%%

t:{&{&&}};;
%%%%
Error in line 2, column 6:
t:{&{&&}};;
     ^
Expecting "}" or mapping from label to session type (e.g., foo:1)
%%%%

t:{&{foo:1;&&}};;
%%%%
Error in line 2, column 12:
t:{&{foo:1;&&}};;
           ^
Expecting mapping from label to session type (e.g., foo:1)
%%%%

t:{&{&&;foo:1}};;
%%%%
Error in line 2, column 6:
t:{&{&&;foo:1}};;
     ^
Expecting "}" or mapping from label to session type (e.g., foo:1)
%%%%

t:{&{bar:&&;foo:1}};;
%%%%
Error in line 2, column 10:
t:{&{bar:&&;foo:1}};;
         ^
Expecting session type
%%%%

t:{ ! && };;
%%%%
Error in line 2, column 7:
t:{ ! && };;
      ^
Expecting session type
%%%%

t:{ @ && };;
%%%%
Error in line 2, column 7:
t:{ @ && };;
      ^
Expecting session type
%%%%

t:{ ' && };;
%%%%
Error in line 2, column 7:
t:{ ' && };;
      ^
Expecting session type
%%%%

t:{ forall && };;
%%%%
Error in line 2, column 12:
t:{ forall && };;
           ^
Expecting session type variable
%%%%

t:{ forall 'x && };;
%%%%
Error in line 2, column 15:
t:{ forall 'x && };;
              ^
Expecting "."
%%%%

t:{ forall 'x . && };;
%%%%
Error in line 2, column 17:
t:{ forall 'x . && };;
                ^
Expecting session type
%%%%

t:{ exists && };;
%%%%
Error in line 2, column 12:
t:{ exists && };;
           ^
Expecting session type variable
%%%%

t:{ exists 'x && };;
%%%%
Error in line 2, column 15:
t:{ exists 'x && };;
              ^
Expecting "."
%%%%

t:{ exists 'x . && };;
%%%%
Error in line 2, column 17:
t:{ exists 'x . && };;
                ^
Expecting session type
%%%%

t:{ 1 /\ && };;
%%%%
Error in line 2, column 7:
t:{ 1 /\ && };;
      ^
Expecting "*", "-o", "<-" or "}"
%%%%

t:{ {'a <- 'a} /\ && };;
%%%%
Error in line 2, column 5:
t:{ {'a <- 'a} /\ && };;
    ^
Expecting "}" or session type
%%%%

t:{ && * 1 };;
%%%%
Error in line 2, column 5:
t:{ && * 1 };;
    ^
Expecting "}" or session type
%%%%

t:{ ('a) * && };;
%%%%
Error in line 2, column 12:
t:{ ('a) * && };;
           ^
Expecting session type
%%%%

t:{ 'a * && };;
%%%%
Error in line 2, column 10:
t:{ 'a * && };;
         ^
Expecting session type
%%%%

t:{ && -o 1 };;
%%%%
Error in line 2, column 5:
t:{ && -o 1 };;
    ^
Expecting "}" or session type
%%%%

t:{ 'a -o && };;
%%%%
Error in line 2, column 11:
t:{ 'a -o && };;
          ^
Expecting session type
%%%%

t:{ && <- };;
%%%%
Error in line 2, column 5:
t:{ && <- };;
    ^
Expecting "}" or session type
%%%%

t:{ 1 <- && };;
%%%%
Error in line 2, column 10:
t:{ 1 <- && };;
         ^
Expecting session type
%%%%

t:{ 1 <- && ; 1 };;
%%%%
Error in line 2, column 10:
t:{ 1 <- && ; 1 };;
         ^
Expecting session type
%%%%

t:{ 1 <- 1 ; && };;
%%%%
Error in line 2, column 14:
t:{ 1 <- 1 ; && };;
             ^
Expecting session type
%%%%

t:{ 1 <-  };;
%%%%
Error in line 2, column 11:
t:{ 1 <-  };;
          ^
Expecting session type
%%%%

t:{ <- && ; 1 };;
%%%%
Error in line 2, column 5:
t:{ <- && ; 1 };;
    ^
Expecting "}" or session type
%%%%

t:{ 1 -o 1 };;
%%%%
Error in line 4, column 1:

Expecting definition for t
%%%%

t:{ 1 };;
t = ;;
%%%%
Error in line 3, column 5:
t = ;;
    ^
Expecting expression
%%%%

t:{ 1 };;
t && = 5;;
%%%%
Error in line 3, column 3:
t && = 5;;
  ^
Expecting "=" or pattern variable
%%%%

'top <- &&;;
%%%%
Error in line 2, column 9:
'top <- &&;;
        ^
Expecting process
%%%%

&& <-
%%%%
Error in line 2, column 1:
&& <-
^
Expecting data-level type declaration, end of input, session type declaration, top level definition or top level process
%%%%

'top <- close 'c and && ;;
%%%%
Error in line 2, column 22:
'top <- close 'c and && ;;
                     ^
Expecting linear channel
%%%%

t1:Int;;
t1 = 5
and
&&
%%%%
Error in line 5, column 1:
&&
^
Expecting type signature
%%%%

t:Int;;
t = fun && -> 5;;
%%%%
Error in line 3, column 9:
t = fun && -> 5;;
        ^
Expecting pattern variable
%%%%

t:Int;;
'c <- t && -< 'd =
  close 'c;;
%%%%
Error in line 3, column 9:
'c <- t && -< 'd =
        ^
Expecting "-<", "=" or pattern variable
%%%%

t:Int;;
t =
 let foo && : Int = 6
 in 8;;
%%%%
Error in line 4, column 10:
 let foo && : Int = 6
         ^
Expecting ":" or pattern variable
%%%%

t:Int;;
'c <- t = &&;;
%%%%
Error in line 3, column 11:
'c <- t = &&;;
          ^
Expecting process
%%%%

t:Int;;
'c <- t -< 'd = &&;;
%%%%
Error in line 3, column 17:
'c <- t -< 'd = &&;;
                ^
Expecting process
%%%%

t:Int;;
_ <- t = &&;;
%%%%
Error in line 3, column 10:
_ <- t = &&;;
         ^
Expecting process
%%%%

t:Int;;
_ <- t -< 'd = &&;;
%%%%
Error in line 3, column 16:
_ <- t -< 'd = &&;;
               ^
Expecting process
%%%%

t:Int;;
t=if && then 5 else 4;;
%%%%
Error in line 3, column 6:
t=if && then 5 else 4;;
     ^
Expecting expression
%%%%

t:Int;;
t=if 4^3 then && else 4;;
%%%%
Error in line 3, column 15:
t=if 4^3 then && else 4;;
              ^
Expecting expression
%%%%

t:Int;;
t=if 4^6 then 5^6 else &&;;
%%%%
Error in line 3, column 24:
t=if 4^6 then 5^6 else &&;;
                       ^
Expecting expression
%%%%

t:Int;;
t=case && of 5;;
%%%%
Error in line 3, column 8:
t=case && of 5;;
       ^
Expecting expression
%%%%

t:Int;;
t=case 5^6 of | -o -> 6;;
%%%%
Error in line 3, column 17:
t=case 5^6 of | -o -> 6;;
                ^
Expecting pattern match
%%%%

t:Int;;
t=case 5^6 of | True -> &&;;
%%%%
Error in line 3, column 25:
t=case 5^6 of | True -> &&;;
                        ^
Expecting expression
%%%%

t:Int;;
t=(&&,8^8);;
%%%%
Error in line 3, column 4:
t=(&&,8^8);;
   ^
Expecting expression
%%%%

t:Int;;
t=(8^8,&&);;
%%%%
Error in line 3, column 8:
t=(8^8,&&);;
       ^
Expecting expression
%%%%

t:Int;;
t=x<&&>;;
%%%%
Error in line 3, column 5:
t=x<&&>;;
    ^
Expecting ','-separated lists of types or '>'
%%%%

t:Int;;
t=x<&&,Int>;;
%%%%
Error in line 3, column 5:
t=x<&&,Int>;;
    ^
Expecting ','-separated lists of types or '>'
%%%%

t:Int;;
'c <- t =
  'c <- service Foo; 
  &&;;
%%%%
Error in line 5, column 3:
  &&;;
  ^
Expecting process statement
%%%%

t:Int;;
'c <- t =
  send 'c ('d <- &&);
  &&;;
%%%%
Error in line 4, column 18:
  send 'c ('d <- &&);
                 ^
Expecting process
%%%%

t: {+{foo:1; foo:1}};;
t = ();;
%%%%
Error in line 2, column 14:
t: {+{foo:1; foo:1}};;
             ^
Unexpected duplicate label foo
%%%%

t: {&{foo:1; foo:1}};;
t = ();;
%%%%
Error in line 2, column 14:
t: {&{foo:1; foo:1}};;
             ^
Unexpected duplicate label foo
%%%%

t:Int;;
f = ();;
%%%%
Error in line 3, column 1:
f = ();;
^
Expecting definition for t
%%%%

t:Int;;
'c <- f x = 
  close 'c;;
%%%%
Error in line 3, column 7:
'c <- f x = 
      ^
Expecting definition for t
%%%%

t:Int;;
_  <- f x = 
  close 'c;;
%%%%
Error in line 3, column 7:
_  <- f x = 
      ^
Expecting definition for t
%%%%

type Foo = Foo | Bar | Foo
%%%%
Error in line 2, column 12:
type Foo = Foo | Bar | Foo
           ^
Unexpected duplicate constructor name Foo
%%%%

f : Int;;
f = case True of
    | True -> 5
    | False -> 3
    | True -> 8;;
%%%%
Error in line 4, column 5:
    | True -> 5
    ^
Unexpected duplicate pattern for True
%%%%

f : { &{red:1}};;
'c <- f =
  case 'c of
  | red -> close 'c
  | red -> close 'c;;
%%%%
Error in line 6, column 3:
  | red -> close 'c;;
  ^
Unexpected duplicate case for label red
%%%%

f : { 1 };;
'c <- f =
  case [] of
  | [] -> close 'a
  | [] -> close 'b;;
%%%%
Error in line 5, column 3:
  | [] -> close 'a
  ^
Unexpected duplicate pattern for []
%%%%

f : { 1 };;
'c <- f =
  case [] of;;
%%%%
Error in line 4, column 13:
  case [] of;;
            ^
Expecting pattern match
%%%%

f : Int;;
f = 1
and
f : Bool;;
f = 2;;
%%%%
Error in line 5, column 1:
f : Bool;;
^
Unexpected duplicate binding for f
%%%%

type Foo a a = Foo a;;
%%%%
Error in line 2, column 10:
type Foo a a = Foo a;;
         ^
Unexpected duplicate quantifier a
%%%%

type Foo 'a 'a = Foo 'a;;
%%%%
Error in line 2, column 10:
type Foo 'a 'a = Foo 'a;;
         ^
Unexpected duplicate quantifier 'a
%%%%

ltype Foo a a = 1;;
%%%%
Error in line 2, column 11:
ltype Foo a a = 1;;
          ^
Unexpected duplicate quantifier a
%%%%

f : forall <a,a,a> . Int;;
f = ();;
%%%%
Error in line 2, column 13:
f : forall <a,a,a> . Int;;
            ^
Unexpected duplicate quantifier a
%%%%

f : Int;;
f x x x = ();;
%%%%
Error in line 3, column 3:
f x x x = ();;
  ^
Unexpected duplicate argument x
%%%%

f : Int;;
f = case () of
    | (x,x) -> ();;
%%%%
Error in line 4, column 10:
    | (x,x) -> ();;
         ^
Unexpected duplicate pattern variable x
%%%%

f : Int;;
f = case () of
    | x::x -> ();;
%%%%
Error in line 4, column 10:
    | x::x -> ();;
         ^
Unexpected duplicate pattern variable x
%%%%
