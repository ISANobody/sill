dup : {mu $x. Int => $x <- mu $y. Int => $y; mu $z. Int => $z};;
dup = 'c1 <- { x <- recv 'c1;
               send 'c2 x;
               send 'c3 x;
               'd <- dup -< 'c2 'c3;
               'c1 <- 'd} -< 'c2 'c3;;

consumer : {mu $x. (Int => $x)};;
consumer = 'c <- { x <- recv 'c;
                   print x;
                   'd <- consumer;
                   'c <- 'd};;

producer : Int -> {1 <- mu $x. Int => $x};;
producer i = 'c <- { send 'd i;
                     'e <- producer (i+1) -< 'd;
                     wait 'e;
                     close 'c} -< 'd;;

'top <- 'c2 <- consumer;
        'c3 <- consumer;
        'c1 <- dup -< 'c2 'c3;
        'p <- producer 0 -< 'c1;
        wait 'p;
        close 'top;;
