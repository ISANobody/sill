type Bool = True | False;;
type Maybe a = Just a | Nothing;;
type Either a b = Left a | Right b;;
type State a b = State (a,b);;
type Funz = Funz (Bool -> ());;
type Funz = Funz [a->b];;
type Funz = Funz (State String);;
type Funz = Funz (State a);;
type Funz = Funz (State 'a);;
type Funz = Funz (State ());;
type Funz = Funz (State [a]);;
type Funz = Funz (State [a->b]);;
type Funz = Funz (State [a->b] String);;
type Funz = Funz (Bool -> State [a->b] String -> Int);;
ltype Stream a = 1;;
ltype Stream a = Stream ;;
ltype Stream a = a /\ 1 ;;
ltype Stream a = a /\ (1 * 1) ;;
ltype Stream a = a /\ 1 * 1 ;;
ltype Stream a = a /\ !Stream ;;
ltype Stream a = a /\ !1 ;;
ltype Stream a = a /\ Stream ;;
ltype Stream a = a /\ Stream a ;;
ltype Stream' a = a => Stream' a;;
ltype ChanStream 'a = 'a * ChanStream 'a;;
ltype ChanStream 'a = 'a * 'a * ChanStream 'a;;
ltype ChanStream 'a = Int * 'a * ChanStream 'a;;
ltype ChanStream 'a = 'a * ChanStream 'a;;
ltype ChanStream 'a = 'a * 'a -o ChanStream 'a;;
ltype ChanStream 'a = Int -o 'a * ChanStream 'a;;
ltype ChanStream 'a = Int -o 'a * ! ChanStream 'a;;
atype Foo = forall 'a. 1 * 1;;
utype Foo = exists 'a. 1 * 1;;
utype Foo = +{};;
utype Foo = +{red:1};;
utype Foo = +{red:Stream a; blue:Steam};;
utype Foo = +{red:Stream a; blue:1};;
utype Foo = +{red:Stream a; blue:1*Stream};;
utype Foo = +{red:Stream a; blue:()=>Stream};;
utype Foo = +{red:Stream a; blue:[Int]/\Steam};;
utype Foo = &{};;
utype Foo = &{red:1};;
utype Foo = &{red:Stream a; blue:Steam};;
utype Foo = &{red:Stream a; blue:1};;
utype Foo = &{red:Stream a; blue:1*Stream};;
utype Foo = &{red:Stream a; blue:()=>Stream};;
utype Foo = &{red:Stream a; blue:[Int]/\Steam};;

f : ();;
f = 5;;

f : forall a 'b !c. ();;
f = 5;;

f : forall . ();;
f = 5;;

f : ();;
'c <- f = close 'c;;

f : ();;
'c <- f -< = close 'c;;

f : ();;
'c <- f -< 'a @b !c = close 'c;;

f : forall . ();;
f x _ = 5;;

f : ();;
'c <- f x _ = close 'c;;

f : ();;
'c <- f x _ -< = close 'c;;

f : ();;
f = 45
and
g : Int;;
g = 8.8 7;;

'top <- close 'top;;

't1 <- close 't1
and
't2 <- close 't2;;

t2 : a -> {Int/\1};; 
'c <- t2 x = 
send 'c 4 ; 
close 'c ;;


ppl : List Int -> {1};;
'c <- ppl l =
case l of
| Nil -> wait 'c; 8 + 8
| Cons x k -> print 1;
              print_str " ";
              'c <- ppl k
;;  
(* (* *) *)
ppl : List Int -> {1};;
'c <- ppl l =
case 'l of
| nil -> "asdf"; 8 + 8
| cons -> print 2;
              print_str " ";
              'c <- ppl k
;; 
ppl : List Int -> {1};;
'c <- ppl l =
case l of
| Nil -> "asdf"; 8 + 8
| Cons x k -> print 3;
              print_str " ";
              'c <- ppl k
;; 
